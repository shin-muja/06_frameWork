IOC(Inversion of Control) : 객체를 생성해주고 관리해줌, 여태 개발자들이 했던 것들을 IOC가 한다하여 제어반전이라 한다


DI(Dependency Indection) : IOC가 만들어둔 객체를 필요한 위치에서 주입한다. 이러하여 의존성 주입이라 한다.

IOC/DI 는 세트로 많이 엮어서 정리, 사실상 세트


POJO(Plain Old Java Object) : 일반적인 자바 객체를 사용할 수 있도록 지원함

AOP(Aspect Orented Programming) : 공통 관심사를 분리하여 코드 중복을 줄이고 유지보수성을 향상시키는 기능을 지원함, 관점 지향 프로그래밍

@Tranjactional - 대표적인 AOP가 적용된 어노테이션


Spring MVC : MVC 디자인 패턴을 적용하는 어노테이션
Model - (Service / DAO / DTO)
View (jsp, html)
Controller ( req, resp을 받아서 처리해줌)
@Controller, @Service, @Repository( == DAO)

PSA(Portable Service Abstraction) : 추상화 기술을 제공하여 다양한 외부 프로그램들을 다루는것
예를 들어 JDBC를 이용할때 OJDBC와 MySQL에 맞게 정리되어 사용


Beans : Spring이 만든 객체


ORM : 데이터베이스를 객체화 해서 갖다 쓰는것들을 ORM이라 한다
JPA : ORM중 가장 유명한 것을 JPA라고 한다, 한국에서는 아직 MyBatics를 사용 차근차근 JPA로 바뀌는중

View Resolver : Spring Boot에서는 자동으로 설정 되어있다
경로 - Controller -> 받은 리턴값 -> 뷰 결정
Controller 메서드 여러개 메서드 반환형 -> 응답 페이지 경로
			  String

View Resolver의 자동으로 설정된 접두사, 접미사
접두사 : src/main/resources(classpath라고 한다)/templates/
접미사 : .htnml


progress 작동중에는 아무것도 안 하는 걸 추천


값을 추척하고 오류를 추척하는 과정을 디버그라고 한다



기본 서버에서 디피로 연결을 할때는 Connection을 생성하고 삭제하면서 내부적으로 많은
자원을 소비한다. 하지만 Spring에서는 'HikariCP Connection Pool Properties'을
사용하여 미리 Connection Pool을 만들어 그 안에 만들어져 있는 Pool안에 Connection을
대여하고 반납하는 식으로 부하를 줄여준다
이걸 Data Base Connection Pool(DBCP) 라고 부른다
위를 더 좋게 사용하는걸 HikariCp

자바에서 객체가 Null로 넘어갈시 DB에서 DML 수행 시
오류가 발생한다

시험
Spring 이용하는 방법 타임리프, MVC어노테이션, 마이바틱스까지

new 연산자를 통해 만든 객체는 개발자가 만든거기에 Bean으로 등록하기 위해서는 
메서드 위에 @Bean 작성

SPA(Single Page Apllication) : 비동기를 활용하여 한페이지에 모든 행동을 처리하는 기술


JS Object를 JSON.stringgify(js객체)에 실행시 JSON으로 변환 JSON은 자바로 넘어갈 때
그에 맞는 알맞은 형태로 변환됨




HTTP 요청 방식 4가지 GET, POST, DELETE, PUT

멱등성(idempotence) : 동일한 요청을 여러번 보내도 결과가 변하지 않는 성질 의미

1. GET(조회)
- 멱등성 O
->/user 사용자 정보 조회 요청을 여러번 보내도 사용자의 정보는 바뀌지 않고 동일한 응답

2. POST(생성/삽입)
- 멱등석 X
-> /order 새로운 주문 요청, 주문이 중복되어 생성됨

3. DELETE(삭제)
- 멱등성 O
-> /user 사용자 삭제 요청을 여러번, 보내도, 첫 요청에서 이미 사용자가 삭제되었다면
    이후 요청은 더이상 서버에 영향 주지 않는다

4. PUT(갱신/수정)
- 멱등성 O
-> /user 사용자 정보 갱신할때 같은 데이터를 여러번 보내도 사용자 정보는 동일하게유지




board 프로젝트 구글 메일 



*** 이미지 전송 이론 설명 ***

이미지가 사용자 눈에 보이는 과정
1. 클라이언트가 서버에 이미지 요청
	<img src="경로"> 태그가 작성되어있으면 브라우저는 src에 있는 경로를 서버에 요청
--> 클라이언트가 서버에 이미지 파일을 보내달라고 요청하는 HTTP 요청으로 처리

2. 서버의 실제 파일 경로와 클라이언트 요청 경로 연결

클라이언트 : A.jpg    (서버의 어느 경로에 A.jpg가 있는지 모름)
--> /myPage/file/A.jpg 요청

<img src="myPage/file/A.jpg" />

서버는 실제로 /myPage/file/** 이 요청 주소와 매핑되어있는 서버 경로를 찾음


만약에 클라이언트가 /myPage/file/** 요청을 보내면
C:/uploadFiles/myPage/ 경로로 매핑
-> 규칙 지정

클라 : /board/file/test.jpg
서버 : C:/uploadFiles/board/경로로 매핑하겠다


3. 서버는 실제 이미지가 있는 경로에서 이미지 파일을 찾아 클라이언트에게 응답

-->   addResourceHandler("/myPage/fiel/**") :
	클라이언트가 요청할 URL 경로 패턴 정의(즉, 클라이언트가 /myPage/file/** 로 요청을 보낼 때 이 요청을 처리)
-->   addResourceLocations("file:///C:/uploadFiles/myPage") :
	서버가 요청을 처리할 때 실제 파일 경로를 설정함(즉, 이 경로에서 파일을 찾아 응답으로 보냄)


//----------------------------------------------------------------------------------------------------------------------

사용자가 사용자 컴퓨터에 있는 이미지 파일을 사이트에 올렸을 때 서버 컴퓨터에 그 이미지가 저장되는 과정

클라이언트 컴퓨터에 있는 이미지를 서버 컴퓨터에 저장하기 위해서는, 
클라이언트가 <input type="file"> 을 통해 선택한 파일을 서버로 전송. HTTP 통해 전송

1. 클라이언트 파일 선택
- <input type="file"> 요소를 사용하여 컴퓨터에 있는 파일을 선택
- 파일을 선택하면 브라우저는 이 파일의 경로와 파일 내용 -> 메모리 로드 

2. 파일을 서버로 전송 (폼 데이터로 요청)
multipart/form-data 형식으로 전송
- 파일 객체 or 단순 텍스트 포함 

3. 서버가 파일 데이터 수신
(Spring) 클라이언트의 요청을 받고, 파일 데이터를 읽어서 서버의 지정된 폴더에 저장
-> 1. Controller에서 MultipartFile 객체를 사용해서 파일을 처리
--> MultipartFile 에 지정되어있는 설정을 통해서 서버가 파일을 지정된 위치에 저장
--> 클라이언트가 myPage에서 프로필 업로드를 요청했다
--> 서버의 C:/uploadeFiles/myPage/ 경로 이하에 MultipartFile 객체를 통해서 전달받은 파일을 저장하겠다.

--> 내가 업로드한 프로필 이미지를 마이페이지에서 확인하고싶어
--> <img src="/myPage/profile/A.jpg">
--> 서버 컴퓨터의 C:/uploadeFiles/myPage/ 매핑하여 A.jpg 찾아 응답


HttpServletRequest 에서 Session 얻어올수 있음
HttpServletRequest와 Session을 통해 apllication 얻어올 수 있음


//----------------------------------------------------------------------------------------------------------------------

11/14 resultMap 하나의 맵으로 여러개의 쿼리를 가져올수 있게 해주는 resultMap

URI : /myPage/profile?memberNo=1 이걸 URL이라하는데 쿼리스트링을 제외한
       /myPage/profile 을 
